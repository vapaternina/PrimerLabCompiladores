/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package primerlabcompiladores.GUI;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.List;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import primerlabcompiladores.ArbolSintactico;
import primerlabcompiladores.Nodo;

/**
 *
 * @author vycto
 * @autor JpinzonM
 */
public class JFrameGUI extends javax.swing.JFrame {

    ArrayList<String> alfabeto;
    ArrayList<String> cadena = new ArrayList<>();
    ArrayList<String> oper;
    ArrayList<String> operFunc;
    String expresionRegular;
    ArbolSintactico arbolSintactico;

    /**
     * Creates new form JFrameGUI
     */
    public JFrameGUI() {
        operFunc = new ArrayList<>();
        oper = new ArrayList<>();
        expresionRegular = "";
        alfabeto = new ArrayList<>();
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+5));
        jLabel1.setText("Primer Laboratorio Compiladores - Autómatas Finitos");

        jButton1.setText("Ingresar ER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Ingrese una expresión regular (ER)");

        jTextField1.setToolTipText("Ingrese expresión regular.");

        jLabel4.setText("Nota 1.: Épsilon es el símbolo &.");

        jLabel5.setText("Nota 2.: Defina las ER solamente con los símbolos |, *, + y ?.");

        jButton2.setText("Primera Pos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Ultima Pos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("TranD");

        jButton5.setText("Arbol");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(374, 374, 374)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton5))))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inicialArbolSintactico() {
        String[] caracteresER = expresionRegular.split("");

        for (int i = 0; i < caracteresER.length; i++) {
            if (caracteresER[i].equals("(") || caracteresER[i].equals(")")
                    || caracteresER[i].equals("+") || caracteresER[i].equals("|")
                    || caracteresER[i].equals("*") || caracteresER[i].equals("?")) {
                oper.add(caracteresER[i]);
                cadena.add(caracteresER[i]);
            } else {
                if (!alfabeto.contains(caracteresER[i])) {
                    alfabeto.add(caracteresER[i]);
                    oper.add(caracteresER[i]);
                    cadena.add(caracteresER[i]);
                } else {
                    oper.add(caracteresER[i]);
                    cadena.add(caracteresER[i]);
                }
            }
        }
        for (String elemento : oper) {
            if (!alfabeto.contains(elemento) && !"(".equals(elemento) && !")".equals(elemento)) {
                operFunc.add(elemento);
            }
        }

        System.out.println("E.R: " + expresionRegular);
        System.out.println("Alfabeto: " + alfabeto);
        System.out.println("Operadores (operFunc): " + operFunc);
        System.out.println("Oper:" + oper);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        expresionRegular = jTextField1.getText();
        inicialArbolSintactico();
        String[] exp = expresionRegular.split("");
        iniciarArbol(exp);
        Nodo raiz = arbolSintactico.getRaiz();
        primUltPosAnulAlfabeto(raiz);
        anulable(raiz);
        primeraPos(raiz);
        ultimaPos(raiz);
        imprimirPost(raiz);
        sgtePos(raiz);
        System.out.println("SgtePos");
        sgtePosT.forEach((x) -> {
            System.out.println(x);
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void iniciarArbol(String[] exp) {
        ArrayList expresion = addConcatenacion(exp);
        arbolSintactico = new ArbolSintactico(expresion);
    }

    ArrayList simbPuedenPrecederConcat = new ArrayList();

    private ArrayList addConcatenacion(String[] exp) {
        alfabeto.add("&");
        simbPuedenPrecederConcat.add("*");
        simbPuedenPrecederConcat.add("+");
        simbPuedenPrecederConcat.add(")");
        simbPuedenPrecederConcat.add("?");
        ArrayList str = new ArrayList();
        for (int i = 0; i < exp.length - 1; i++) {
            str.add(exp[i]);
            if (!exp[i].equals("(") && !exp[i].equals("|")) {
                if (((simbPuedenPrecederConcat.contains(exp[i]) || alfabeto.contains(exp[i])) && (alfabeto.contains(exp[i + 1]) || exp[i + 1].equals("(")))) {
                    str.add(".");
                }
            }
        }
        str.add(exp[exp.length - 1]);
        str.add(".");
        str.add("#");
        System.out.println(str);
        return str;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        PrimeraPosFrame pp = new PrimeraPosFrame();
        pp.setVisible(true);
        pp.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        UltimaPosFrame up = new UltimaPosFrame();
        up.setVisible(true);
        up.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here: 
        DrawPanel objDP = new DrawPanel();
        TreeController objController = new TreeController(arbolSintactico, objDP);
        objController.start();

        //JPanel panel = new JPanel(new BorderLayout());
        JScrollPane jScrollPane = new JScrollPane(objDP,
                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
                JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        JFrame ventana = new JFrame();
        ventana.getContentPane().add(jScrollPane);
        ventana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ventana.setSize(600, 600);

        ventana.setVisible(true);
        ventana.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrameGUI jfg = new JFrameGUI();
                jfg.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void anulable(Nodo r) {
        String dato = r.getDato();

        if (r.getDer() != null) {
            anulable(r.getDer());
        }
        if (r.getIzq() != null) {
            anulable(r.getIzq());
        }

        switch (dato) {
            case "*": {
                r.anulable = true;
                break;
            }
            case "?": {
                r.anulable = true;
                break;
            }
            case "+": {
                r.anulable = false;
                break;
            }
            case "|": { //C1 = Izq - C2 = Der
                r.anulable = r.getIzq().anulable || r.getDer().anulable;
                break;
            }
            case ".": {
                r.anulable = r.getIzq().anulable && r.getDer().anulable;
                break;
            }
            case "&": {
                r.anulable = true;
                break;
            }
        }
    }

    private void ultimaPos(Nodo r) {
        String dato = r.getDato();
        if (r.getIzq() != null) {
            ultimaPos(r.getIzq());
        }
        if (r.getDer() != null) {
            ultimaPos(r.getDer());
        }

        switch (dato) {
            case "*": { //Cerradura de Kleene, pPos = el único hijo que tiene.
                r.setUltimaPos(r.getIzq().getUltimaPos());
                break;
            }
            case "+": { //Cerradura positiva, pPos = el único hijo que tiene.
                r.setUltimaPos(r.getIzq().getUltimaPos());
                break;
            }
            case "?": { //Opcional, pPos = el único hijo que tiene.
                r.setUltimaPos(r.getIzq().getUltimaPos());
                break;
            }
            case "|": { //
                ArrayList<Integer> aux = new ArrayList<>();
                aux.addAll(r.getIzq().getUltimaPos());
                aux.addAll(r.getDer().getUltimaPos());
                r.setUltimaPos(aux);
                break;
            }
            case ".": { //Concatenacion
                if (r.getIzq().anulable) {
                    ArrayList<Integer> aux = new ArrayList<>();
                    aux.addAll(r.getIzq().getUltimaPos());
                    aux.addAll(r.getDer().getUltimaPos());
                    r.setUltimaPos(aux);
                } else {
                    r.setUltimaPos(r.getDer().getUltimaPos());
                }
                break;
            }
        }

    }

    private void primeraPos(Nodo r) {
        String dato = r.getDato();
        if (r.getIzq() != null) {
            primeraPos(r.getIzq());
        }
        if (r.getDer() != null) {
            primeraPos(r.getDer());
        }

        switch (dato) {
            case "*": { //Cerradura de Kleene, pPos = el único hijo que tiene.
                r.setPrimeraPos(r.getIzq().getPrimeraPos());
                break;
            }
            case "+": { //Cerradura positiva, pPos = el único hijo que tiene.
                r.setPrimeraPos(r.getIzq().getPrimeraPos());
                break;
            }
            case "?": { //Opcional, pPos = el único hijo que tiene.
                r.setPrimeraPos(r.getIzq().getPrimeraPos());
                break;
            }
            case "|": { //
                ArrayList<Integer> aux = new ArrayList<>();
                aux.addAll(r.getIzq().getPrimeraPos());
                aux.addAll(r.getDer().getPrimeraPos());
                r.setPrimeraPos(aux);
                break;
            }
            case ".": { //Concatenacion
                if (r.getIzq().anulable) {
                    ArrayList<Integer> aux = new ArrayList<>();
                    aux.addAll(r.getIzq().getPrimeraPos());
                    aux.addAll(r.getDer().getPrimeraPos());
                    r.setPrimeraPos(aux);
                } else {
                    r.setPrimeraPos(r.getIzq().getPrimeraPos());
                }
                break;
            }
        }

    }

    ArrayList[] next;
    
    private void sgtPos(Nodo raiz){
        String dato = raiz.getDato();
        if (raiz.getIzq() != null) {
            sgtPos(raiz.getIzq());
        }
        if (raiz.getDer() != null) {
            sgtPos(raiz.getDer());
        }
        switch (dato) {
            case ".":
                ArrayList<Integer> upos = raiz.getIzq().ultimaPos;
                ArrayList<Integer> ppos = raiz.getDer().primeraPos;
                for (int i = 0; i < upos.size(); i++){
                    for (int j = 0; j < ppos.size(); j++){
                        next[upos.get(i)].add(ppos.get(j));
                    }
                }
                break;
            case "+":
                ArrayList<Integer> mppos = raiz.getIzq().primeraPos;
                ArrayList<Integer> mupos = raiz.getIzq().ultimaPos;
                for (int i = 0; i < mupos.size(); i++){
                    for (int j = 0; j < mppos.size(); j++){
                        next[mupos.get(i)].add(mppos.get(j));
                    }
                }
                break;
            case "*":
                ArrayList<Integer> appos = raiz.getIzq().primeraPos;
                ArrayList<Integer> aupos = raiz.getIzq().ultimaPos;
                for (int i = 0; i < aupos.size(); i++){
                    for (int j = 0; j < appos.size(); j++){
                        next[aupos.get(i)].add(appos.get(j));
                    }
                }
                break;
        }
    }

    int posActual = 1;

    private void primUltPosAnulAlfabeto(Nodo r) {
        if (r != null) {
            primUltPosAnulAlfabeto(r.getIzq());
            primUltPosAnulAlfabeto(r.getDer());
            if (alfabeto.contains(r.getDato()) || r.getDato().equals("#")) {
                r.primeraPos.add(posActual++);
                r.ultimaPos = r.primeraPos;
                r.anulable = false;
            }
        }
    }

    private void imprimirPost2(Nodo r) {
        if (r.getIzq() != null) {
            imprimirPost(r.getIzq());
        }
        if (r.getDer() != null) {
            imprimirPost(r.getDer());
        }

        System.out.print("Dato: " + r.getDato() + " ");
        System.out.print("PPos: ");
        System.out.print(r.primeraPos + " ");
        System.out.print("UPos: ");
        System.out.print(r.ultimaPos + " ");
        System.out.print("Anul: ");
        System.out.print(r.anulable + " ");
        System.out.println("UPos");
        System.out.println(r.ultimaPos);
    }

    private void imprimirPost(Nodo r) {
        if (r != null) {
            imprimirPost(r.getIzq());
            imprimirPost(r.getDer());
            System.out.print("Dato: " + r.getDato() + " ");
            System.out.print("PPos: ");
            System.out.print(r.primeraPos + " ");
            System.out.print("UPos: ");
            System.out.print(r.ultimaPos + " ");
            System.out.print("Anul: ");
            System.out.print(r.anulable + " ");
            System.out.println("");
        }
    }
}
